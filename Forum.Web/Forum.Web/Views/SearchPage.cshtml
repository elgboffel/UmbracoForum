@using System.Globalization
@using System.Text
@using System.Text.RegularExpressions
@using Examine
@using Umbraco.Core.Logging
@using ClientName.Web.Models;

@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<SearchPage>
@{
    Layout = "_Layout.cshtml";

    var model = new SearchViewModel
    {
        SearchTerm = CleanseSearchTerm(("" + Request["q"]).ToLower(CultureInfo.InvariantCulture)),
        CurrentPage = Umbraco.GetQueryString<int>("p", 0),
        PageSize = Model.Content.PageSize <= 0 ? 10 : Model.Content.PageSize,
        StartContentNode = Model.Content.StartContentNode,
        StartMediaNode = Model.Content.StartMediaNode,
        IndexType = "", //UmbracoExamine.IndexTypes.Content,
        SearchFields = new List<string> { "shortDescription", "longDescription", "seoTitle", "seoDescription", "nodeName", "bodyText" },
        PreviewFields = new List<string> { "shortDescription", "longDescription", "seoDescription" },
        PreviewLength = 250,
        HideFromSearchField = "umbracoNaviHide"
    };

    // Validate values
    if (model.IndexType != UmbracoExamine.IndexTypes.Content &&
        model.IndexType != UmbracoExamine.IndexTypes.Media)
    {
        model.IndexType = "";
    }

    // ====================================================
    // Comment the next if statement out if you want a root
    // node id of -1 to search content across all sites
    // and not just the current site.
    // ====================================================
    if (model.StartContentNode != null)
    {
        model.StartContentNode = Model.Content.AncestorOrSelf(1);
    }

    // If searching on umbracoFile, also search on umbracoFileName
    if (model.SearchFields.Contains("umbracoFile") && !model.SearchFields.Contains("umbracoFileName"))
    {
        model.SearchFields.Add("umbracoFileName");
    }

    // Check the search term isn't empty
    if (!string.IsNullOrWhiteSpace(model.SearchTerm))
    {
        // Tokenize the search term
        model.SearchTerms = Tokenize(model.SearchTerm);

        // Perform the search
        var searcher = ExamineManager.Instance.SearchProviderCollection["ExternalSearcher"];
        var criteria = searcher.CreateSearchCriteria();
        var query = new StringBuilder();
        query.AppendFormat("-{0}:1 ", model.HideFromSearchField);

        // Set search path
        var contentPathFilter = model.StartContentNode != null
            ? string.Format("__IndexType:{0} +searchPath:{1} -template:0", UmbracoExamine.IndexTypes.Content, model.StartContentNode.Id)
            : string.Format("__IndexType:{0} -template:0", UmbracoExamine.IndexTypes.Content);

        var mediaPathFilter = model.StartMediaNode != null
            ? string.Format("__IndexType:{0} +searchPath:{1}", UmbracoExamine.IndexTypes.Media, model.StartMediaNode.Id)
            : string.Format("__IndexType:{0}", UmbracoExamine.IndexTypes.Media);

        switch (model.IndexType)
        {
            case UmbracoExamine.IndexTypes.Content:
                query.AppendFormat("+({0}) ", contentPathFilter);
                break;
            case UmbracoExamine.IndexTypes.Media:
                query.AppendFormat("+({0}) ", mediaPathFilter);
                break;
            default:
                query.AppendFormat("+(({0}) ({1})) ", contentPathFilter, mediaPathFilter);
                break;
        }

        // Ensure page contains all search terms in some way
        foreach (var term in model.SearchTerms)
        {
            var groupedOr = new StringBuilder();
            foreach (var searchField in model.SearchFields)
            {
                groupedOr.AppendFormat("{0}:{1}* ", searchField, term);
            }
            query.Append("+(" + groupedOr.ToString() + ") ");
        }

        // Rank content based on positon of search terms in fields
        for (var i = 0; i < model.SearchFields.Count; i++)
        {
            foreach (var term in model.SearchTerms)
            {
                query.AppendFormat("{0}:{1}*^{2} ", model.SearchFields[i], term, model.SearchFields.Count - i);
            }
        }

        var criteria2 = criteria.RawQuery(query.ToString());
        var cleanResults = searcher.Search(criteria2);
        var results = searcher.Search(criteria2)
           .Where(x => (
                !Umbraco.IsProtected(x.Fields["__Path"]) ||
                (
                    Umbraco.IsProtected(x.Fields["__Path"]) &&
                    Umbraco.MemberHasAccess(x.Fields["__Path"])
                )) && (
                    (x.Fields["__IndexType"] == UmbracoExamine.IndexTypes.Content && Umbraco.TypedContent(int.Parse(x.Fields["id"])) != null) ||
                    (x.Fields["__IndexType"] == UmbracoExamine.IndexTypes.Media && Umbraco.TypedMedia(int.Parse(x.Fields["id"])) != null)
                ))
            .ToList();

        model.AllResults = cleanResults;

        model.TotalResults = results.Count;
        model.TotalPages = (int)Math.Ceiling((decimal)model.TotalResults / model.PageSize);
        model.CurrentPage = Math.Max(1, Math.Min(model.TotalPages, model.CurrentPage));

        // Page the results
        model.PagedResults = model.AllResults.Skip(model.PageSize * (model.CurrentPage - 1)).Take(model.PageSize);

        LogHelper.Debug<string>("[Search] Searching Lucene with the following query: " + query.ToString());

        if (!model.PagedResults.Any())
        {
            // No results found, so render no results view
            @RenderNoResults(model)
            <pre class="hidden">@(query.ToString())</pre>
        }
        else
        {
            // Render out the results
            @RenderSummary(model)
            @RenderResultsRange(model)
            @RenderResults(model)
            if (model.TotalPages > 1)
            {
                @RenderPagination(model)
            }
            <hr class="hr-backslash" />
        }
    }
    else
    {
        // Empty search term
       <p>Skriv et søgeord for at finde resultater.</p>
    }
}

@*
    ==================================================
     Render Functions
    ==================================================
*@

@helper RenderSummary(SearchViewModel model)
{
    <div class="page-header">
        <p>@FormatHtml(Umbraco.GetDictionaryValue("[Search] Summary", "Fandt {0} resultat(er) for \"{1}\""), model.TotalResults, model.SearchTerm)</p>
    </div>
}

@helper RenderResultsRange(SearchViewModel model)
{
    var startRecord = ((model.CurrentPage - 1) * model.PageSize) + 1;
    var endRecord = Math.Min(model.TotalResults, (startRecord - 1) + model.PageSize);

    <div class="text-muted">
        <p>@FormatHtml(Umbraco.GetDictionaryValue("[Search] Results Range", "Viser resultater <strong>{0}</strong> til <strong>{1}</strong>."), startRecord, endRecord)</p>
    </div>
}

@helper RenderResults(SearchViewModel model)
{
    <div class="row">
        <div class="col-md-12">
            <div class="media-list">
                @foreach (var result in model.PagedResults)
                {
                    switch (result.Fields["__IndexType"])
                    {
                        case UmbracoExamine.IndexTypes.Content:
                            var contentItem = Umbraco.TypedContent(result.Fields["id"]);
                            @RenderContentResult(model, contentItem)
                            break;
                        case UmbracoExamine.IndexTypes.Media:
                            var mediaItem = Umbraco.TypedMedia(result.Fields["id"]);
                            @RenderMediaResult(model, mediaItem)
                            break;
                    }
                }
            </div>
        </div>
    </div>
}

@helper RenderContentResult(SearchViewModel model, IPublishedContent result)
{
    <div class="media">
        <div class="media-body">
            <h4 class="media-heading"><a href="@result.Url">@result.Name</a></h4>
            @foreach (var field in model.PreviewFields.Where(field => result.HasValue(field)))
            {
                <p>@Highlight(Umbraco.TruncateWordBreak(Umbraco.StripHtml(result.GetPropertyValue(field).ToString()).ToString(), model.PreviewLength), model.SearchTerms)</p>
                break;
            }
        </div>

        @if (result.HasValue("image"))
        {
            var image = result.GetPropertyValue<IPublishedContent>("image"");
            if (image != null ) {
                <div class="media-right">
                    <a href="@result.Url">
                        <img class="media-object" src="@image.Url" alt="@result.GetPropertyValue("alt", result.Name)">
                    </a>
                </div>
            }
        }
    </div>
}

@helper RenderMediaResult(SearchViewModel model, IPublishedContent result)
{
    <div class="media">
        @if (result.DocumentTypeAlias == "Image")
        {
            <div class="media-left">
                <a href="@result.Url">
                    <img class="media-object" src="@result.GetCropUrl( width: 160, height: 120 )" alt="@result.GetPropertyValue("alt", result.Name)">
                </a>
            </div>
        }
        else if (result.DocumentTypeAlias == "File")
        {
            <div class="media-left">
                <a href="@result.Url" data-extension="@result.GetPropertyValue("umbracoExtension")">
                    @switch (result.GetPropertyValue<string>("umbracoExtension"))
                    {
                        case "pdf": <span class="fa fa-3x fa-file-pdf-o"></span> break;
                        case "doc":
                        case "docx": <span class="fa fa-3x fa-file-word-o"></span> break;
                        default: <span class="fa fa-3x fa-file"></span> break;
                    }
                </a>
            </div>
        }
        <div class="media-body">
            <h4><a href="@(result.GetPropertyValue<string>("umbracoFile"))" class="@(result.GetPropertyValue<string>("umbracoExtension"))">@result.Name</a></h4>
            @foreach (var field in model.PreviewFields.Where(field => result.HasValue(field)))
            {
                <p>@Highlight(Umbraco.TruncateWordBreak(Umbraco.StripHtml(result.GetPropertyValue(field).ToString()).ToString(), model.PreviewLength), model.SearchTerms)</p>
                break;
            }
        </div>
    </div>
}

@helper RenderPagination(SearchViewModel model)
{
    <nav class="text-center">
        @Html.Partial("Shared/_Pagination", new PaginationModel(model.TotalResults, model.CurrentPage, model.PageSize))
    </nav>
}

@helper RenderNoResults(SearchViewModel model)
{
    <div class="search-no-results">
        <p>@FormatHtml(Umbraco.GetDictionaryValue("[Search] No Results", "No results found for search term <strong>{0}</strong>."), model.SearchTerm)</p>
    </div>
}

@functions
{
    // ==================================================
    //  Helper Functions
    //==================================================

    // Cleanse the search term
    public string CleanseSearchTerm(string input)
    {
        return Umbraco.StripHtml(input).ToString();
    }

    // Splits a string on space, except where enclosed in quotes
    public IEnumerable<string> Tokenize(string input)
    {
        Regex regex = new Regex("(?<=\")\\w[\\w\\s]*(?=\")|\\w+|\"[\\w\\s]*\"");
        var matches = regex.Matches(input)
            .Cast<Match>()
            .Select(p => p.Value)
            .ToList();

        return matches;
    }

    // Highlights all occurances of the search terms in a body of text
    public IHtmlString Highlight(IHtmlString input, IEnumerable<string> searchTerms)
    {
        return Highlight(input.ToString(), searchTerms);
    }

    // Highlights all occurances of the search terms in a body of text
    public IHtmlString Highlight(string input, IEnumerable<string> searchTerms)
    {
        input = HttpUtility.HtmlDecode(input);

        foreach (var searchTerm in searchTerms)
        {
            input = Regex.Replace(input, Regex.Escape(searchTerm), @"<strong>$0</strong>", RegexOptions.IgnoreCase);
        }

        return new HtmlString(input);
    }

    // Formats a string and returns as HTML
    public IHtmlString FormatHtml(IHtmlString input, params object[] args)
    {
        return Html.Raw(string.Format(input.ToString(), args));
    }

    //// Truncates a string on word breaks
    //public string Truncate(IHtmlString input, int maxLength)
    //{
    //    return Truncate(input.ToString(), maxLength);
    //}

    //// Truncates a string on word breaks
    //public string Truncate(string input, int maxLength)
    //{
    //    var truncated = Umbraco.Truncate(input, maxLength, true).ToString();
    //    if (truncated.EndsWith("&hellip;"))
    //    {
    //        var lastSpaceIndex = truncated.LastIndexOf(' ');
    //        if (lastSpaceIndex > 0)
    //        {
    //            truncated = truncated.Substring(0, lastSpaceIndex) + "&hellip;";
    //        }
    //    }

    //    return truncated;
    //}

    // ==================================================
    //  Helper Classes
    //==================================================

    public class SearchViewModel
    {
        // Query Parameters
        public string SearchTerm { get; set; }
        public IEnumerable<string> SearchTerms { get; set; }
        public int CurrentPage { get; set; }

        // Options
        public IPublishedContent StartContentNode { get; set; }
        public IPublishedContent StartMediaNode { get; set; }
        public string IndexType { get; set; }
        public IList<string> SearchFields { get; set; }
        public IList<string> PreviewFields { get; set; }
        public int PreviewLength { get; set; }
        public int PageSize { get; set; }
        public string HideFromSearchField { get; set; }
        public string SearchFormLocation { get; set; }

        // Results
        public int TotalResults { get; set; }
        public int TotalPages { get; set; }

        public IEnumerable<SearchResult> AllResults { get; set; }
        public IEnumerable<SearchResult> PagedResults { get; set; }
    }
}
